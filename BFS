#include <iostream>
#include <queue>

using namespace std;

void matrix (int **p, int **arr, int v, int e) { //матрица смежности
    for (int i=0; i<v; i++) { 
        for (int j=0; j<v; j++) {
            p[i][j]=0;
        }
    }
    for (int i=0; i<e; i++) {
        p[arr[i][0]-1][arr[i][1]-1]=1;
        p[arr[i][1]-1][arr[i][0]-1]=1;
    }
}

void BFS (int v0, int v, int **g, bool *used) {
    queue <int> q;
    q.push(v0);
    int t=0;
    while (!q.empty()) {
        t=q.front();
        q.pop();
        for (int i=0; i<v; i++) {
            if ((g[t][i]) && (!used[i])) {
                used[i]=1;
                q.push(i);
            }
        }
    }
}

int main() {
    int v, e;
    cin>>v>>e;
    int **arr=new int* [e];
    for (int i=0; i<e; i++) {
        arr[i]=new int [2];
    }
    for (int i=0; i<e; i++) {
        cin>>arr[i][0]>>arr[i][1];
    }
    int **g=new int* [v];
    for (int i=0; i<v; i++) {
        g[i]=new int [v];
    }
    matrix(g, arr, v, e);
    bool *used=new bool[v];
    for (int i=0; i<v; i++) {
        used[i]=0;
    }
    BFS(0, v, g, used);
    return 0;
}
