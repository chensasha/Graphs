//определить, к какой компоненте связности относится вершина v0

#include <iostream>

using namespace std;

void matrix (int **p, int **arr, int v, int e) { //матрица смежности
    for (int i=0; i<v; i++) { 
        for (int j=0; j<v; j++) {
            p[i][j]=0;
        }
    }
    for (int i=0; i<e; i++) {
        p[arr[i][0]-1][arr[i][1]-1]=1;
        p[arr[i][1]-1][arr[i][0]-1]=1;
    }
}

void DFS (int v0, int v, int **g, int *used, int c) {
    for (int i=0; i<v; i++) {
        if (g[v0][i]==1 && used[i]==0) {
            used[i]=c;
            DFS(i, v, g, used, c);
        }
    }
}
    
int main() {
    int v, e;
    int v0;
    cin>>v>>e;
    cin>>v0;
    int **arr=new int* [e];
    for (int i=0; i<e; i++) {
        arr[i]=new int [2];
    }
    for (int i=0; i<e; i++) {
        cin>>arr[i][0]>>arr[i][1];
    }
    int **g=new int* [v];
    for (int i=0; i<v; i++) {
        g[i]=new int [v];
    }
    matrix(g, arr, v, e);
    int *used=new int[v];
    for (int i=0; i<v; i++) {
        used[i]=0;
    }
    int c=0;
    for (int i=0; i<v; i++) {
        if (used[i]==0) {
            c++;
            DFS(i, v, g, used, c);
        }
    }
    cout<<used[v0-1];
    return 0;
}
