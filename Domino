#include <iostream>

using namespace std;

void matrix (int **p, int **arr, int v, int e) {
    for (int i=0; i<v; i++) { 
        for (int j=0; j<v; j++) {
            p[i][j]=0;
        }
    }
    for (int i=0; i<e; i++) {
        p[arr[i][0]-1][arr[i][1]-1]++;
        p[arr[i][1]-1][arr[i][0]-1]++;
    }
}

void DFS (int v0, int v, int **g, int *used, int c) {
    for (int i=0; i<v; i++) {
        if (g[v0][i]!=0 && used[i]==0) {
            used[i]=c;
            DFS(i, v, g, used, c);
        }
    }
}

int main() {
    int e;
    cin>>e;
    int **arr=new int* [e];
    for (int i=0; i<e; i++) {
        arr[i]=new int [2];
    }
    for (int i=0; i<e; i++) {
        cin>>arr[i][0]>>arr[i][1];
    }
    int max=0;
    for (int i=0; i<e; i++) {
        for (int j=0; j<2; j++) {
            if (arr[i][j]>max) {
                max=arr[i][j];
            }
        }
    }
    int v=max;
    int **g=new int* [v]; //матрица смежности 
    for (int i=0; i<v; i++) {
        g[i]=new int [v];
    }
    matrix (g, arr, v, e);
    int *used=new int[v];
    for (int i=0; i<v; i++) {
        used[i]=0;
    }
    int c=0;
    for (int i=0; i<v; i++) {
        if (used[i]==0) {
            c++;
            DFS(i, v, g, used, c);
        }
    }
    int t=used[arr[0][0]-1];
    int count=0;
    for (int i=0; i<v; i++) {
        for (int j=0; j<2; j++) {
            if (used[arr[i][j]-1]!=t) {
                count++;
            }
        }
    }
    if (count!=0) {
        cout<<"No";
    }
    else {
        int s=0;
        int k=0;
        for (int i=0; i<v; i++) {
            for (int j=0; j<v; j++) {
                s+=g[i][j];
            }
            if (s%2!=0) {
                k++;
            }
            s=0;
        }
        if (k<=2) {
            cout<<"Yes";
        } 
        else {
            cout<<"No";
        }
    }
    return 0;
}
